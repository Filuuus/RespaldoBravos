"""Initial migration.

Revision ID: 2882b6a751bc
Revises: 
Create Date: 2025-04-20 21:22:28.549865

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2882b6a751bc'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('actividad_usuario', schema=None) as batch_op:
        batch_op.drop_index('idx_actividad_usuario_fecha')
        batch_op.drop_index('idx_actividad_usuario_id_carpeta')
        batch_op.drop_index('idx_actividad_usuario_id_documento')
        batch_op.drop_index('idx_actividad_usuario_id_usuario')
        batch_op.drop_index('idx_actividad_usuario_tipo')

    op.drop_table('actividad_usuario')
    with op.batch_alter_table('carpetas', schema=None) as batch_op:
        batch_op.drop_index('idx_carpetas_padre')
        batch_op.drop_index('idx_carpetas_unicas_por_padre')
        batch_op.drop_index('idx_carpetas_usuario')

    op.drop_table('carpetas')
    with op.batch_alter_table('usuarios', schema=None) as batch_op:
        batch_op.drop_index('idx_usuarios_codigo_usuario')

    op.drop_table('usuarios')
    op.drop_table('categorias')
    with op.batch_alter_table('documentos', schema=None) as batch_op:
        batch_op.drop_index('idx_documentos_carpeta')
        batch_op.drop_index('idx_documentos_categoria')
        batch_op.drop_index('idx_documentos_usuario')

    op.drop_table('documentos')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('documentos',
    sa.Column('id_documento', sa.INTEGER(), server_default=sa.text("nextval('documentos_id_documento_seq'::regclass)"), autoincrement=True, nullable=False, comment='Primary key for the document record (32-bit integer)'),
    sa.Column('titulo_original', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Original filename provided by the user, for display'),
    sa.Column('descripcion', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('s3_bucket', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Name of the AWS S3 bucket where the file is stored'),
    sa.Column('s3_object_key', sa.VARCHAR(length=1024), autoincrement=False, nullable=False, comment='Unique key (path and filename) of the object within the S3 bucket'),
    sa.Column('s3_version_id', sa.VARCHAR(length=1024), autoincrement=False, nullable=True, comment='Version ID of the object in S3, if versioning is enabled'),
    sa.Column('mime_type', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='MIME content type of the file (e.g., application/pdf)'),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True, comment='Size of the file in bytes (WARNING: INTEGER limits file size to < 2.14 GB)'),
    sa.Column('fecha_carga', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Timestamp when the document record was created (upload time)'),
    sa.Column('fecha_modificacion', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Timestamp when the document record was last updated'),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False, comment='Foreign key referencing the user (assuming INTEGER key in usuarios table)'),
    sa.Column('id_carpeta', sa.INTEGER(), autoincrement=False, nullable=True, comment='Foreign key referencing the folder (assuming INTEGER key in carpetas table)'),
    sa.Column('id_categoria', sa.INTEGER(), autoincrement=False, nullable=True, comment='Foreign key referencing the document category (assuming INTEGER key in categorias table)'),
    sa.Column('periodo_inicio', sa.DATE(), autoincrement=False, nullable=True, comment='Start date of the academic or validity period'),
    sa.Column('periodo_fin', sa.DATE(), autoincrement=False, nullable=True, comment='End date of the academic or validity period'),
    sa.Column('favorito', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False, comment='Boolean flag indicating if the user marked it as a favorite'),
    sa.ForeignKeyConstraint(['id_carpeta'], ['carpetas.id_carpeta'], name='fk_carpeta', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['id_categoria'], ['categorias.id_categoria'], name='fk_categoria', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='fk_usuario', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id_documento', name='documentos_pkey'),
    sa.UniqueConstraint('s3_object_key', name='documentos_s3_object_key_key'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('documentos', schema=None) as batch_op:
        batch_op.create_index('idx_documentos_usuario', ['id_usuario'], unique=False)
        batch_op.create_index('idx_documentos_categoria', ['id_categoria'], unique=False)
        batch_op.create_index('idx_documentos_carpeta', ['id_carpeta'], unique=False)

    op.create_table('categorias',
    sa.Column('id_categoria', sa.INTEGER(), server_default=sa.text("nextval('categorias_id_categoria_seq'::regclass)"), autoincrement=True, nullable=False, comment='Primary key for the category (32-bit integer)'),
    sa.Column('nombre', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Unique name of the document category'),
    sa.CheckConstraint("nombre::text <> ''::text", name='check_nombre_non_empty'),
    sa.PrimaryKeyConstraint('id_categoria', name='categorias_pkey'),
    sa.UniqueConstraint('nombre', name='categorias_nombre_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('usuarios',
    sa.Column('id_usuario', sa.INTEGER(), server_default=sa.text("nextval('usuarios_id_usuario_seq'::regclass)"), autoincrement=True, nullable=False, comment='Internal primary key for the user (32-bit integer)'),
    sa.Column('codigo_usuario', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Unique user ID/code from the external school system (Candidate Key)'),
    sa.Column('nombre_completo', sa.TEXT(), autoincrement=False, nullable=False, comment="User's full name from the external system"),
    sa.Column('tipo_usuario', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='User type from the external system'),
    sa.Column('plantel', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment="User's campus/school from the external system"),
    sa.Column('seccion', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment="User's section/department from the external system"),
    sa.Column('fecha_registro', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Timestamp when the user first logged into this application'),
    sa.Column('ultimo_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment="Timestamp of the user's last successful login to this application"),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False, comment='Flag indicating if the user is active within this application (allows local deactivation)'),
    sa.CheckConstraint("codigo_usuario::text <> ''::text", name='check_codigo_usuario_non_empty'),
    sa.CheckConstraint("nombre_completo <> ''::text", name='check_nombre_completo_non_empty'),
    sa.PrimaryKeyConstraint('id_usuario', name='usuarios_pkey'),
    sa.UniqueConstraint('codigo_usuario', name='usuarios_codigo_usuario_key'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('usuarios', schema=None) as batch_op:
        batch_op.create_index('idx_usuarios_codigo_usuario', ['codigo_usuario'], unique=False)

    op.create_table('carpetas',
    sa.Column('id_carpeta', sa.INTEGER(), server_default=sa.text("nextval('carpetas_id_carpeta_seq'::regclass)"), autoincrement=True, nullable=False, comment='Primary key for the folder (32-bit integer)'),
    sa.Column('nombre', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Name of the folder'),
    sa.Column('id_carpeta_padre', sa.INTEGER(), autoincrement=False, nullable=True, comment="FK referencing the parent folder's ID in this table (NULL for root)"),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False, comment='FK referencing the user who owns the folder'),
    sa.Column('fecha_creacion', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Timestamp when the folder was created'),
    sa.Column('fecha_modificacion', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Timestamp when the folder was last modified'),
    sa.ForeignKeyConstraint(['id_carpeta_padre'], ['carpetas.id_carpeta'], name='fk_carpeta_padre', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='fk_usuario_carpeta', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_carpeta', name='carpetas_pkey'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('carpetas', schema=None) as batch_op:
        batch_op.create_index('idx_carpetas_usuario', ['id_usuario'], unique=False)
        batch_op.create_index('idx_carpetas_unicas_por_padre', ['id_usuario', 'id_carpeta_padre', 'nombre'], unique=True)
        batch_op.create_index('idx_carpetas_padre', ['id_carpeta_padre'], unique=False)

    op.create_table('actividad_usuario',
    sa.Column('id_actividad', sa.INTEGER(), autoincrement=True, nullable=False, comment='Primary key for the log entry (32-bit integer)'),
    sa.Column('fecha', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Timestamp (with timezone) when the activity occurred'),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False, comment='User who performed the activity (references usuarios.id)'),
    sa.Column('direccion_ip', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='IP address from which the activity originated (logged via application)'),
    sa.Column('tipo_actividad', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Category/Type of the logged activity (e.g., LOGIN, UPLOAD_DOC)'),
    sa.Column('id_documento', sa.INTEGER(), autoincrement=False, nullable=True, comment='Related document ID (references documentos.id), if applicable'),
    sa.Column('id_carpeta', sa.INTEGER(), autoincrement=False, nullable=True, comment='Related folder ID (references carpetas.id), if applicable'),
    sa.Column('detalle', sa.TEXT(), autoincrement=False, nullable=True, comment='Additional details about the activity (TEXT allows for long strings/JSON)'),
    sa.CheckConstraint("tipo_actividad::text <> ''::text", name='actividad_usuario_tipo_actividad_check'),
    sa.ForeignKeyConstraint(['id_carpeta'], ['carpetas.id_carpeta'], name='fk_actividad_carpeta', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['id_documento'], ['documentos.id_documento'], name='fk_actividad_documento', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='fk_actividad_usuario', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id_actividad', name='actividad_usuario_pkey')
    )
    with op.batch_alter_table('actividad_usuario', schema=None) as batch_op:
        batch_op.create_index('idx_actividad_usuario_tipo', ['tipo_actividad'], unique=False)
        batch_op.create_index('idx_actividad_usuario_id_usuario', ['id_usuario'], unique=False)
        batch_op.create_index('idx_actividad_usuario_id_documento', ['id_documento'], unique=False)
        batch_op.create_index('idx_actividad_usuario_id_carpeta', ['id_carpeta'], unique=False)
        batch_op.create_index('idx_actividad_usuario_fecha', [sa.literal_column('fecha DESC')], unique=False)

    # ### end Alembic commands ###
